---
swagger: '2.0'
info:
  version: 0.0.1
  title: My Bike - Bike Service (Prototype)
  description: This service provides read and update access to bikes. Bikes have location, status and owner information. Status can be one of `FREE`, `booked` and `UNAVAILABLE`. 
    Bikes in status `BOOKED` identify the owning user via the owener information. Users cannot own more than on bike at any given point in time.
basePath: /api
paths:
  /bikes/{bike_id}:
    get:
      tags:
        - Bikes
      summary: Retrieve an individual bike record.
      description: Use this endpoint to load an individual bike record.
      produces:
        - application/json
      parameters:
        - name: bike_id
          in: path
          description: Identifies the bike to be loaded.
          required: true
          type: string
      responses:
        200:
          description: Successfully lists a paged result view of all the asset in the database.
          schema:
            $ref: '#/definitions/Bike'
          
        500:
          description: Is returned in case of an internal server error
    put:
      tags:
        - Bikes
      summary: Update a bike record.
      description: | 
        Use this endpoint to update a bike record by putting the new data.
        The `bike_id` value from the request identifies the bike record to be updated and needs to match the `id` value provided in the JSON body.
        
        ### Example post body:

          ~~~
            {
              "id": "0a800487f06d71eaf4cffdfde1ab28bc",
              "owner": "John Doe",
              "status": "BOOKED"
              "longitude": "BOOKED",
              "latitude": "BOOKED"
            }
          ~~~

      produces:
        - application/json
      parameters:
        - name: bike_id
          in: path
          description: Identifies the bike to be loaded.
          required: true
          type: string
      responses:
        200:
          description: Bike record was successfully updated. The response serves the new data for the updated bike
          schema:
            $ref: '#/definitions/Bike'
        403:
          description: In case the update would result in a user owning more than one bike.
        404:
          description: In case the given bike cannot be found.        
        500:
          description: Is returned in case of an internal server error
  /bikes/by_user:
    get:
      tags:
        - Bikes
      summary: Retrieve the list of bikes that are in status `FREE` or owned by a given user.
      description: Use this endpoint to load aall relevant bike record for a given user.
      produces:
        - application/json
      parameters:
        - name: user_id
          in: query
          description: Identifies the user. If this user is owning a bike, this bike will be part of the response.
          required: true
          type: string
      responses:
        200:
          description: Successfully lists a paged result view of all the asset in the database.
          schema:
              $ref: '#/definitions/BikeList'
        500:
          description: Is returned in case of an internal server error
definitions:
  Bike:
    type: object
    properties:
      id:
        type: string
        description: The id of the bike.
        readOnly: true
        example: 0a800487f06d71eaf4cffdfde1ab28bc
        maxLength: 100
        pattern: "^[a-zA-Z0-9*.\\-_:]*$"
      status:
        type: string
        description: The booking status of the bile.
        readOnly: false
        enum:
          - FREE
          - BOOKED
          - UNAVAILABLE
      owner:
        type: string
        description: Name of a user currently owning the given bike.
      longitude:
        type: number
        readOnly: false
        description: The longitude aspect of the bike location.
      latitude:
        type: number
        readOnly: false
        description: The latitude aspect of the bike location.
  BikeList:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/Bike'

tags:
  - name: Bikes
    description: Access to bikes
